@import "../../styles/theme";

@mixin reset-margin {
  &:not(:nth-child(1n)) {
    margin-right: 0;
  }

  &:not(:nth-child(2n)) {
    margin-right: 0;
  }

  &:not(:nth-child(3n)) {
    margin-right: 0;
  }

  &:not(:nth-child(4n)) {
    margin-right: 0;
  }

  &:not(:nth-child(5n)) {
    margin-right: 0;
  }
}

.browserGrid {
  margin: 0;
  padding: 0;
  list-style: none;
}

.gridItem {
  display: block;
  margin-bottom: var(--spacing);
  float: left;

  height: auto;
  width: calc(
    (100% / map-get($list-columns, "xs")) - var(--spacing) +
      calc(var(--spacing) / map-get($list-columns, "xs"))
  );

  &:not(:nth-child(#{map-get($list-columns, "xs")}n)) {
    margin-right: var(--spacing);
  }

  @media (min-width: map-get($breakpoints, "sm")) {
    width: calc(
      (100% / map-get($list-columns, "sm")) - var(--spacing) +
        calc(var(--spacing) / map-get($list-columns, "sm"))
    );

    @include reset-margin;

    &:not(:nth-child(#{map-get($list-columns, "sm")}n)) {
      margin-right: var(--spacing);
    }
  }

  @media (min-width: map-get($breakpoints, "md")) {
    width: calc(
      (100% / map-get($list-columns, "md")) - var(--spacing) +
        calc(var(--spacing) / map-get($list-columns, "md"))
    );

    @include reset-margin;

    &:not(:nth-child(#{map-get($list-columns, "md")}n)) {
      margin-right: var(--spacing);
    }
  }

  @media (min-width: map-get($breakpoints, "lg")) {
    width: calc(
      (100% / map-get($list-columns, "lg")) - var(--spacing) +
        calc(var(--spacing) / map-get($list-columns, "lg"))
    );

    @include reset-margin;

    &:not(:nth-child(#{map-get($list-columns, "lg")}n)) {
      margin-right: var(--spacing);
    }
  }

  @media (min-width: map-get($breakpoints, "xl")) {
    width: calc(
      (100% / map-get($list-columns, "xl")) - var(--spacing) +
        calc(var(--spacing) / map-get($list-columns, "xl"))
    );

    @include reset-margin;

    &:not(:nth-child(#{map-get($list-columns, "xl")}n)) {
      margin-right: var(--spacing);
    }
  }
}

.link {
  height: 100%;
  overflow: hidden;

  display: flex;
  align-items: stretch;
  flex-direction: column;

  border: var(--border-width) solid var(--muted-border-color);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);

  transition:
    border-color var(--transition),
    background-color var(--transition),
    color var(--transition);

  &:is(:hover, :active, :focus) {
    border-color: var(--border-color);
    color: var(--contrast-hover);
    text-decoration: none;
    background-color: var(--muted-border-color);
  }

  &:focus {
    background-color: var(--background-color);
  }

  &[aria-current] {
    text-decoration: none;
    outline: var(--outline-width) solid var(--support);
    border: none;
  }
}

.linkUpdateAvailable[aria-current] {
  outline-color: var(--warning);
}

.browserInfo {
  display: flex;
  align-items: center;
  flex-direction: column;

  padding: var(--spacing);
}

.itemHeading {
  &:not(:last-child) {
    margin-bottom: 0;
  }
}

.description {
  display: block;
  text-align: center;
  height: calc(var(--line-height) * 2em);
  color: var(--muted-color);
  overflow: hidden;
}

.spacer {
  flex-grow: 1;
}

.version {
  display: flex;
  align-items: center;
  justify-content: center;

  padding: 0 var(--spacing);
  line-height: 3.5rem;

  background-color: var(--muted-color);
  color: var(--muted-inverse);
}

.label {
  text-transform: uppercase;
  font-size: var(--font-small-size);
  color: var(--muted-inverse);

  &:not(:last-child) {
    margin-right: var(--spacing);
  }
}

.stat {
  font-size: var(--font-h3-size);
}

.versionUpdateAvailable {
  background-color: var(--warning);
  color: var(--warning-inverse);
}

.versionLatest {
  background-color: var(--support);
  color: var(--support-inverse);
}

.clearFloat {
  display: block;
  clear: both;
}
